-- Information block for the plugin
PluginInfo = {
  Name = "TAG~Local Save Function",
  Version = "1.0",
  BuildVersion = "1.0.0.17",
  Id = "463824d1-a6ad-49d8-97ca-63059d892c5d",
  Author = "Jason Foord (TAG)",
  Description = "Save and restore the .String property of controls on named components using a local JSON file in the PageArchives/Configuration Files directory"
}

width = 250 -- scalable plugin width
control_depth = 16 -- scalable control depth
control_gap = 3 -- vertical space between controls

Colors = {
    none = {0, 0, 0, 0},
    primary = {212, 202, 226},
    secondary = {51, 51, 51},
    heading = {50, 50, 50},
    label = {50, 50, 50},
    stroke = {51, 51, 51},
    black = {51, 51, 51}
}

Sizes = {
    ["Button"] = {36, control_depth},
    ["Text"] = {(width - 30) / 2, control_depth},
    ["Status"] = {width - 30, (control_depth * 2) + (control_gap * 1)},
    ["LED"] = {16, control_depth},
    ["ListBox"] = {width - 30, (control_depth * 10) + (control_gap * 9)},
    ["Image"] = {width - 30, (control_depth * 6) + (control_gap * 5)}
}

Master_Object = {{

    ["PageName"] = "Dashboard",

    ["Groupings"] = {{
        ["Name"] = "Sync/Save",
        ["Depth"] = 3,
        ["Controls"] = {{
            Name = "config_filename",
            PrettyName = "Configuration~Filename",
            Label = "Filename",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "config_sync",
            PrettyName = "Configuration~Sync",
            ControlType = "Button",
            ButtonType = "Trigger",
            Legend = "Sync",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            Position = (width - 15) - Sizes.Button[1] - Sizes.Text[1],
            GridPos = 2
        }, {
            Name = "status_sync",
            PrettyName = "Configuration~Status~Sync",
            Label = "Sync",
            ControlType = "Indicator",
            IndicatorType = "Status",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "config_save",
            PrettyName = "Configuration~Save",
            ControlType = "Button",
            ButtonType = "Trigger",
            Legend = "Save",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            Position = (width - 15) - Sizes.Button[1] - Sizes.Text[1],
            GridPos = 3
        }, {
            Name = "status_save",
            PrettyName = "Configuration~Status~Save",
            Label = "Save",
            ControlType = "Indicator",
            IndicatorType = "Status",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        },
    }

    }, {
        ["Name"] = "Components",
        ["Depth"] = 14,
        ["Controls"] = {{
            Name = "components_filter",
            PrettyName = "Select Components~Filter",
            Label = "Filter",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "components_selectall",
            PrettyName = "Select Components~Select All",
            Label = "Select All",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 2
        }, {
            Name = "components_deselectall",
            PrettyName = "Select Components~Deselect All",
            Label = "Deselect All",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 3
        }, {
            Name = "components_list",
            PrettyName = "Select Components~List",
            Label = "Components",
            ControlType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Style = "ListBox",
            Width = "Full",
            Size = Sizes.ListBox,
            GridPos = 4
        }}
    }, {
        ["Name"] = "Controls",
        ["Depth"] = 13,
        ["Controls"] = {{
            Name = "controls_selectall",
            PrettyName = "Select Controls~Select All",
            Label = "Select All",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "controls_deselectall",
            PrettyName = "Select Controls~Deselect All",
            Label = "Deselect All",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 2
        }, {
            Name = "controls_list",
            PrettyName = "Select Controls~List",
            Label = "Controls",
            ControlType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Style = "ListBox",
            Width = "Full",
            Size = Sizes.ListBox,
            GridPos = 3
        }}
    }, {
        ["Name"] = "Errors",
        ["Depth"] = 11,
        ["Controls"] = {{
            Name = "errors_list",
            PrettyName = "Error List",
            Label = "Errors",
            ControlType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Style = "ListBox",
            Width = "Full",
            Size = Sizes.ListBox,
            GridPos = 1
        }}
    }}
}}

-- Define the color of the plugin object in the design
function GetColor(props)
    return Colors.primary
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
    return string.format("TAG Local Save Function [%s]", PluginInfo.Version)
end

-- Optional function used if plugin has multiple pages
function GetPages(props)
    local pages = {}
    for i, tbl in ipairs(Master_Object) do
      table.insert(pages, {name = tbl.PageName})
    end
    return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
    local model = {}
    return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    local components = {}
    table.insert(components,{
      Name = "main_mixer",
      Type = "mixer",
      Properties =   
      {
        ["n_inputs"] = 8,
        ["n_outputs"] = 1,
      }
    })
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    local wiring = {}
    return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
    local ctls = {}
    for i, page in ipairs(Master_Object) do
      for i, grouping in ipairs(page.Groupings) do
          for i, control in ipairs(grouping.Controls) do
              table.insert(ctls, control)
          end
      end
    end
    return ctls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local graphics, layout, control_slots = {}, {}, {}
    
    local page_index = props["page_index"].Value
    
    -- starting depth
    local total_depth = 0
    
    -- dynamically create graphics boxes
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        total_depth = total_depth + control_depth
    
        depth = grouping.Depth
    
        len = string.len(grouping.Name)
    
        table.insert(graphics, {
            Type = "GroupBox",
            Fill = Colors.primary,
            StrokeColor = Colors.stroke,
            StrokeWidth = 2,
            CornerRadius = 8,
            HTextAlign = "Left",
            Position = {
                0,
                total_depth
            },
            Size = {
                width,
                40 + (depth * control_depth) + ((depth - 1) * control_gap)
            }
        })
    
        -- generate control slots per group box depth and control_depth requirement
    
        grouping["Control_Slots"] = {}
    
        for n = 1, grouping.Depth do
    
            grouping["Control_Slots"][n] = ((total_depth + 25) + (control_depth * (n - 1)) + ((n - 1) * control_gap))
    
        end
    
        -- dynamically create groupbox labels
        table.insert(graphics, {
            Type = "Label",
            Text = Master_Object[page_index].Groupings[i].Name,
            -- Size = 11,
            Color = {
                255,
                255,
                255
            },
            Fill = Colors.heading,
            StrokeWidth = 0,
            CornerRadius = 4,
            Position = {
                15,
                total_depth - 8
            },
            Size = {
                len <= 12 and 90 or len <= 20 and 140 or len <= 30 and 170,
                18
            },
            Font = "Montserrat",
            FontStyle = "Medium"
        })
    
        total_depth = total_depth + 40 + ((depth * control_depth) + ((depth - 1) * control_gap))
    
    end
    
    -- width of the group box minus borders
    local box_width = (width - 60)
    
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        local Slots = grouping.Control_Slots
    
        for _, ctl in ipairs(grouping.Controls) do
    
            local pos_x = nil
            local pos_y = nil
    
            if (ctl.Width and (ctl.Width == "Full")) then
                pos_x = 15
                pos_y = (Slots[ctl.GridPos] + control_depth + control_gap)
            else
                if (ctl.Position) then
                    pos_x = ctl.Position
                else
                    pos_x = (width - 15) - ctl.Size[1]
                end
                pos_y = Slots[ctl.GridPos]
            end
    
            layout[ctl.Name] = {
                PrettyName = ctl.PrettyName,
                Legend = ctl.Legend,
                Style = ctl.Style,
                Position = {
                    pos_x,
                    pos_y
                },
                Size = ctl.Size,
                Font = "Droid Sans",
                FontSize = 8
            }
    
            if ctl.Label then
                table.insert(graphics, {
                    Type = "Label",
                    Text = ctl.Label,
                    HTextAlign = "Left",
                    Color = Colors.label,
                    Font = "Droid Sans",
                    Position = {
                        15,
                        (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                    },
                    Size = {
                        (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Size[1],
                        control_depth
                    }
                })
            end
    
        end
    
    end
    return layout, graphics
end

-- Start event based logic
if Controls then

    rapidjson = require('rapidjson')

    directory = "media/PageArchives/Configuration Files"
    
    -- and utf8.char(1068sync"7) or utf8.char(9675)
    
    function SetStatus(code, message, name)
    
        Controls[string.format("status_%s", name)].Value = code
        Controls[string.format("status_%s", name)].String = message
    
    end; SetStatus(0, "", "sync"); SetStatus(0, "", "save")
    
    function GetFilename()
    
        local name = Controls["config_filename"].String
        if not name:match("%w+") then name = "default-config" end
        
        return string.format("%s/%s.json", directory, name)
    end
    
    function GetComponents()
        
        ResetControlsList()
        ComponentList = {}
        Components = Component.GetComponents()
        
        for i, component in ipairs(Components) do
           
           if component.Name:find(Controls['components_filter'].String) then
            
            table.insert(ComponentList, {
                Text = component.Name,
                Icon = utf8.char(9675),
            })
            
            end
            
            
        end
        
        Controls["components_list"].Choices = ComponentList
        
        Sync()
    end
    
    function ComponentIsValid(component)
    
        for i, choice in ipairs(ComponentList) do
        
            if (choice.Text == component) then; return true; end
        
        end
        
        return false
    end
    
    function ResetControlsList()
        Controls["controls_list"].Choices = {}
        Controls["controls_list"].String = ""
    end
    
    function Sync()
        
        -- check for directory
        if (not dir.get(directory)) then SetStatus(1, "Directory Doesn't Exist", "sync") return print("Could not Sync - Directory Does not Exist") end
        
        local filename = GetFilename()
        local file = io.open( filename, "r+" )
        
        -- check for file
        if (not file) then SetStatus(1, "File Doesn't Exist", "sync") return print("Could not Sync - File Does not Exist") end
        
        -- fetch file data
        local data = file:read("*a")
        file:close()
        
        data = rapidjson.decode(data)
        
        UpdateList(data)
        
        -- update the list box
        Controls["components_list"].Choices = ComponentList
        
    end
    
    function UpdateList(data)
        
        -- reset the string, so there's no weird interactions with the list box
        Controls["components_list"].String = ""
        
        -- reset the selections
        for i, choice in ipairs(ComponentList) do
            --ComponentList[i].Selected = false
            ComponentList[i].Color = nil
        end
        
        local Errors = {}
        
        local function PushValues(component, props)
            local component = Component.New(component)
            print(props.Control)
            component[props.Control].String = props.String
        end
        
        -- error check that the JSON data is valid
        if (not data) then
            
            SetStatus(2, "Invalid JSON Data", "sync")
            print("Invalid JSON")     
            table.insert(Errors, {Color = "Red", Text = "Invalid JSON - Check Formatting"})
            Controls["errors_list"].Choices = Errors
            return
            
        end
        
        SetStatus(0, "Sync Successful", "sync")
        
        -- iterate through the components in the JSON data
        for component, json_tbl in pairs(data) do
            
            -- error check that the component exists in the design file
            if ComponentIsValid(component) then
            
                -- update the component control values in the design from the file
                for i, props in pairs(json_tbl) do
                    
                    result, err = pcall(PushValues, component, props)
                    
                    -- error check that the control update was successful
                    if err then
                        
                        -- filter the error
                        if err:match("Control is read%-only") then
                            msg = "is a read-only control"
                        else
                            msg = "does not exist"
                            SetStatus(1, "Errors Found", "sync")
                            print(string.format("Invalid Control '%s' for Component '%s'\n\nError: [%s]", props.Control, component, err))
                        end
                        
                        table.insert(Errors, {
                            Color = err:match("Control is read%-only") and "Green" or "Orange",
                            Text = string.format("'%s' %s on Component '%s'", props.Control, msg, component)
                        })
                        
                        for i, choice in ipairs(ComponentList) do
                            if (choice.Text == component) then ComponentList[i]["Color"] = err:match("Control is read%-only") and "" or "Orange" end
                        end
            
                    end
                
                end
            
            -- report any components that were not found in the design file
            else
                
                SetStatus(1, "Errors Found", "sync")
                
                print(string.format("Missing Component: '%s'", component))
                        
                table.insert(Errors, {Color = "Red", Text = string.format("Missing Component: '%s'", component)})
            
            end
            
            -- check the components list for the incoming component
            for i, choice in ipairs(ComponentList) do
                
                if (choice.Text == component) then
                
                    --ComponentList[i].Selected = true
                    
                end
                
                -- update the icon for this component to reflect it's 'selected' state
                ComponentList[i].Icon = ComponentList[i].Selected and utf8.char(10687) or utf8.char(9675)
            end
            
        end
        
        --print(rapidjson.encode(ComponentList, {pretty = true}))
        
        Controls["errors_list"].Choices = Errors
        Controls["errors_list"].String = ""
    
    end
    
    function GetControlsOnComponent(component, i, options)
        
        ComponentList[i].Controls = {}
        
        local controls = Component.GetControls(Component.New(component))
        
        for _, control in ipairs(controls) do
          
            if (control.Direction ~= "Read Only") then
                table.insert(ComponentList[i].Controls, {
                    Text = control.Name,
                    Selected = (options and options.selectAll),
                    Icon = utf8.char(9675),
                    ParentComponent = component,
                    String = control.String
                })
            end
          
        end
        
        if (not options) then
          Controls["controls_list"].Choices = ComponentList[i].Controls
          
          Controls["controls_list"].String = ""
        end
        
    end
    
    function Save()
        
        -- create directory
        if (not dir.get(directory)) then
            dir.create(directory)
            print( string.format("Creating Directory: %s", directory) )
        end
        
        local Data = {}
        
        for i, choice in pairs(ComponentList) do
            
            Data = AddSelectedControls(i, choice, Data)
        
        end
        
        local filename = GetFilename()
        file = io.open(filename, "w+" )
        
        if (not Data) then Data = {} end
        
        if (not file) then SetStatus(1, "File Doesn't Exist", "save") return print("File Doesn't Exist - Can't Save") end
        
        print(string.format("Saving Configuration:\n\n%s", rapidjson.encode(Data, {pretty = true})))
        
        file:write(rapidjson.encode(Data, {pretty = true}))
        file:close()
        
        SetStatus(0, "Save Successful", "save")
        
    end
    
    function AddSelectedControls(i, choice, tbl)
        
        -- if component isn't selected, return here before doing anything
        if (not choice.Selected) then return tbl end
        
        -- create the entry with this component as the key, but don't overwrite it if it exists
        if (not tbl[choice.Text]) then tbl[choice.Text] = {} end
        
        local ctrls = ComponentList[i].Controls
        
        -- error check to see if Controls have been selected on this component
        if (not ComponentList[i].Controls) then return print(string.format("[No Controls Selected for Component '%s']", choice.Text)) end
        
        for _, control in ipairs(ctrls) do
            if (control.Selected) then
                table.insert(tbl[choice.Text], {Control = control.Text, String = control.String})
            end
        end
        
        return tbl
    end
    
    function SelectAll(bool)
        
        for i, choice in ipairs(ComponentList) do
        
            ComponentList[i].Selected = bool
            ComponentList[i].Icon = ComponentList[i].Selected and utf8.char(10687) or utf8.char(9675)
            GetControlsOnComponent(choice.Text, i, {selectAll = bool})
        
        end
        
        Controls["components_list"].Choices = ComponentList
        ResetControlsList()
        
    end
    
    function SelectAllControlsOnly(bool)
        
        
        local this_control = rapidjson.decode(Controls["components_list"].String)
        
        local parent_component = this_control.Text
        
        for i, choice in ipairs(ComponentList) do
        
            if (parent_component == choice.Text) then
            
                for id, control in ipairs(choice.Controls) do
                    
                    ComponentList[i].Controls[id].Selected = bool
                    ComponentList[i].Controls[id].Icon = ComponentList[i].Controls[id].Selected and utf8.char(10687) or utf8.char(9675)
                        
                end
                
                Controls["controls_list"].Choices = ComponentList[i].Controls
                
            end
        
        end
        
        --Controls["controls_list"].String = ""
        
    end
    
    Controls["config_filename"].EventHandler = SetFilename
    Controls["config_save"].EventHandler = Save
    Controls["config_sync"].EventHandler = Sync
    
    Controls["components_list"].EventHandler = function(c)
    
        local component = rapidjson.decode(c.String).Text
        
        for i, choice in ipairs(ComponentList) do
        
            if (component == choice.Text) then
                ComponentList[i].Selected = (not ComponentList[i].Selected)
                ComponentList[i].Icon = ComponentList[i].Selected and utf8.char(10687) or utf8.char(9675)
                if (ComponentList[i].Selected) then GetControlsOnComponent(component, i) else ResetControlsList() end
            end
        
        end
        
        Controls["components_list"].Choices = ComponentList
        
        --Controls["components_list"].String = ""
        
    end
    
    Controls["components_selectall"].EventHandler = function() SelectAll(true) end
    Controls['components_deselectall'].EventHandler = function() SelectAll(false) end
    Controls['controls_selectall'].EventHandler = function() SelectAllControlsOnly(true) end
    Controls['controls_deselectall'].EventHandler = function() SelectAllControlsOnly(false) end
    
    Controls["controls_list"].EventHandler = function(c)
        
        local this_control = rapidjson.decode(c.String)
        
        local parent_component = this_control.ParentComponent
        
        for i, choice in ipairs(ComponentList) do
        
            if (parent_component == choice.Text) then
            
                for id, control in ipairs(choice.Controls) do
                    if (control.Text == this_control.Text) then
                        
                        ComponentList[i].Controls[id].Selected = (not ComponentList[i].Controls[id].Selected)
                        ComponentList[i].Controls[id].Icon = ComponentList[i].Controls[id].Selected and utf8.char(10687) or utf8.char(9675)
                        
                    end
                end
                
                Controls["controls_list"].Choices = ComponentList[i].Controls
                
            end
        
        end
        --print(rapidjson.encode(ComponentList, {pretty = true}))
        --Controls["controls_list"].String = ""
        
    end
    
    Controls['components_filter'].EventHandler = GetComponents
    
    GetComponents()

end
